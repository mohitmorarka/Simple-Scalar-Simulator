DVFSInterval: 1000000
DVFSTargetPower: 58
sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).


Processor Parameters:
Issue Width: 4
Window Size: 16
Number of Virtual Registers: 32
Number of Physical Registers: 16
Datapath Width: 64
Total Power Consumption: 73.7882
Branch Predictor Power Consumption: 4.52313  (6.3%)
 branch target buffer power (W): 4.16837
 local predict power (W): 0.0879711
 global predict power (W): 0.0996078
 chooser power (W): 0.0702439
 RAS power (W): 0.0969383
Rename Logic Power Consumption: 0.417965  (0.582%)
 Instruction Decode Power (W): 0.0159915
 RAT decode_power (W): 0.113514
 RAT wordline_power (W): 0.0307815
 RAT bitline_power (W): 0.246771
 DCL Comparators (W): 0.0109075
Instruction Window Power Consumption: 2.20432  (3.07%)
 tagdrive (W): 0.0943488
 tagmatch (W): 0.033695
 Selection Logic (W): 0.0134217
 decode_power (W): 0.0532503
 wordline_power (W): 0.0844643
 bitline_power (W): 1.92514
Load/Store Queue Power Consumption: 0.96318  (1.34%)
 tagdrive (W): 0.457232
 tagmatch (W): 0.100774
 decode_power (W): 0.00799577
 wordline_power (W): 0.0150119
 bitline_power (W): 0.382166
Arch. Register File Power Consumption: 3.57247  (4.98%)
 decode_power (W): 0.113514
 wordline_power (W): 0.0844643
 bitline_power (W): 3.37449
Result Bus Power Consumption: 2.29754  (3.2%)
Total Clock Power: 26.0975  (36.4%)
Int ALU Power: 4.66013  (6.49%)
FP ALU Power: 14.281  (19.9%)
Instruction Cache Power Consumption: 2.21363  (3.08%)
 decode_power (W): 0.779481
 wordline_power (W): 0.028656
 bitline_power (W): 0.886372
 senseamp_power (W): 0.096
 tagarray_power (W): 0.423116
Itlb_power (W): 0.263317 (0.367%)
Data Cache Power Consumption: 5.18303  (7.22%)
 decode_power (W): 0.651055
 wordline_power (W): 0.196735
 bitline_power (W): 2.71235
 senseamp_power (W): 0.768
 tagarray_power (W): 0.854886
Dtlb_power (W): 0.901877 (1.26%)
Level 2 Cache Power Consumption: 4.2091 (5.86%)
 decode_power (W): 0.41817
 wordline_power (W): 0.0430878
 bitline_power (W): 3.0244
 senseamp_power (W): 0.192
 tagarray_power (W): 0.531433
warning: section `.comment' ignored...
sim: command line: ../sim-outorder go.alpha 2 8 2stone9.in 1 1000000 58 

sim: simulation started @ Fri Dec  6 17:03:28 2013, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst                   0 # maximum number of inst's to execute
-fastfwd                    0 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                  bimod # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         18 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                  8 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** starting performance simulation **
sim_cycle 1000000
a is :58
sim_cycle 2000000
a is :112
Total Power DVFS :112895920.000000
Average Power DVFS :112.895920
Target Power DVFS :58.000000
FSF0.800000
VSF0.800000
sim_cycle 3000000
a is :84
Total Power DVFS :84918136.000000
Average Power DVFS :84.918137
Target Power DVFS :58.000000
FSF0.600000
VSF0.600000
sim_cycle 4000000
a is :47
Total Power DVFS :47085108.000000
Average Power DVFS :47.085110
Target Power DVFS :58.000000
FSF0.800000
VSF0.800000
sim_cycle 5000000
a is :138
Total Power DVFS :138262544.000000
Average Power DVFS :138.262543
Target Power DVFS :58.000000
FSF0.600000
VSF0.600000
sim_cycle 6000000
a is :69
Total Power DVFS :69739424.000000
Average Power DVFS :69.739426
Target Power DVFS :58.000000
FSF0.400000
VSF0.400000
sim_cycle 7000000
a is :24
Total Power DVFS :24045634.000000
Average Power DVFS :24.045633
Target Power DVFS :58.000000
FSF0.600000
VSF0.600000
sim_cycle 8000000
a is :92
Total Power DVFS :92595600.000000
Average Power DVFS :92.595596
Target Power DVFS :58.000000
FSF0.400000
VSF0.400000
sim_cycle 9000000
a is :30
Total Power DVFS :30760114.000000
Average Power DVFS :30.760115
Target Power DVFS :58.000000
FSF0.600000
VSF0.600000
sim_cycle 10000000
a is :114
Total Power DVFS :114968776.000000
Average Power DVFS :114.968773
Target Power DVFS :58.000000
FSF0.400000
VSF0.400000
sim_cycle 11000000
a is :37
Total Power DVFS :37389848.000000
Average Power DVFS :37.389847
Target Power DVFS :58.000000
FSF0.600000
VSF0.600000
sim_cycle 12000000
a is :137
Total Power DVFS :137358736.000000
Average Power DVFS :137.358734
Target Power DVFS :58.000000
FSF0.400000
VSF0.400000
sim_cycle 13000000
a is :44
Total Power DVFS :44028052.000000
Average Power DVFS :44.028053
Target Power DVFS :58.000000
FSF0.600000
VSF0.600000
sim_cycle 14000000
a is :159
Total Power DVFS :159775728.000000
Average Power DVFS :159.775726
Target Power DVFS :58.000000
FSF0.400000
VSF0.400000
sim_cycle 15000000
a is :50
Total Power DVFS :50661752.000000
Average Power DVFS :50.661751
Target Power DVFS :58.000000
FSF0.600000
VSF0.600000
sim_cycle 16000000
a is :182
Total Power DVFS :182108032.000000
Average Power DVFS :182.108032
Target Power DVFS :58.000000
FSF0.400000
VSF0.400000
sim_cycle 17000000
a is :57
Total Power DVFS :57247460.000000
Average Power DVFS :57.247459
Target Power DVFS :58.000000
FSF0.600000
VSF0.600000
sim_cycle 18000000
a is :204
Total Power DVFS :204242784.000000
Average Power DVFS :204.242783
Target Power DVFS :58.000000
FSF0.400000
VSF0.400000
warning: partially supported sigprocmask() call...

sim: ** simulation statistics **
sim_num_insn               24102401 # total number of instructions committed
sim_num_refs                8292404 # total number of loads and stores committed
sim_num_loads               6785892 # total number of loads committed
sim_num_stores         1506512.0000 # total number of stores committed
sim_num_branches            3395912 # total number of branches committed
sim_elapsed_time                 37 # total simulation time in seconds
sim_inst_rate           651416.2432 # simulation speed (in insts/sec)
sim_total_insn             29614634 # total number of instructions executed
sim_total_refs             10225934 # total number of loads and stores executed
sim_total_loads             8491959 # total number of loads executed
sim_total_stores       1733975.0000 # total number of stores executed
sim_total_branches          4080384 # total number of branches executed
sim_cycle                  18137209 # total simulation time in cycles
sim_IPC                      1.3289 # instructions per cycle
sim_CPI                      0.7525 # cycles per instruction
sim_exec_BW                  1.6328 # total instructions (mis-spec + committed) per cycle
sim_IPB                      7.0975 # instruction per branch
IFQ_count                  47635932 # cumulative IFQ occupancy
IFQ_fcount                 10751748 # cumulative IFQ full count
ifq_occupancy                2.6264 # avg IFQ occupancy (insn's)
ifq_rate                     1.6328 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  1.6085 # avg IFQ occupant latency (cycle's)
ifq_full                     0.5928 # fraction of time (cycle's) IFQ was full
RUU_count                 179080725 # cumulative RUU occupancy
RUU_fcount                  6651645 # cumulative RUU full count
ruu_occupancy                9.8737 # avg RUU occupancy (insn's)
ruu_rate                     1.6328 # avg RUU dispatch rate (insn/cycle)
ruu_latency                  6.0470 # avg RUU occupant latency (cycle's)
ruu_full                     0.3667 # fraction of time (cycle's) RUU was full
LSQ_count                  62709359 # cumulative LSQ occupancy
LSQ_fcount                  1586121 # cumulative LSQ full count
lsq_occupancy                3.4575 # avg LSQ occupancy (insn's)
lsq_rate                     1.6328 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  2.1175 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0875 # fraction of time (cycle's) LSQ was full
sim_slip                  246513048 # total number of slip cycles
avg_sim_slip                10.2277 # the average slip between issue and retirement
bpred_bimod.lookups         4364135 # total number of bpred lookups
bpred_bimod.updates         3395912 # total number of updates
bpred_bimod.addr_hits       2735733 # total number of address-predicted hits
bpred_bimod.dir_hits        2822307 # total number of direction-predicted hits (includes addr-hits)
bpred_bimod.misses           573605 # total number of misses
bpred_bimod.jr_hits          258843 # total number of address-predicted hits for JR's
bpred_bimod.jr_seen          297600 # total number of JR's seen
bpred_bimod.jr_non_ras_hits.PP        34167 # total number of address-predicted hits for non-RAS JR's
bpred_bimod.jr_non_ras_seen.PP        64781 # total number of non-RAS JR's seen
bpred_bimod.bpred_addr_rate    0.8056 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_bimod.bpred_dir_rate    0.8311 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_bimod.bpred_jr_rate    0.8698 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_bimod.bpred_jr_non_ras_rate.PP    0.5274 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_bimod.retstack_pushes       303124 # total number of address pushed onto ret-addr stack
bpred_bimod.retstack_pops       323876 # total number of address popped off of ret-addr stack
bpred_bimod.used_ras.PP       232819 # total number of RAS predictions used
bpred_bimod.ras_hits.PP       224676 # total number of RAS hits
bpred_bimod.ras_rate.PP    0.9650 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses               32020453 # total number of accesses
il1.hits                   31546744 # total number of hits
il1.misses                   473709 # total number of misses
il1.replacements             473197 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0148 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0148 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses                8848562 # total number of accesses
dl1.hits                    8663579 # total number of hits
dl1.misses                   184983 # total number of misses
dl1.replacements             184471 # total number of replacements
dl1.writebacks                55612 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0209 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0208 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0063 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                 714304 # total number of accesses
ul2.hits                     661243 # total number of hits
ul2.misses                    53061 # total number of misses
ul2.replacements              48965 # total number of replacements
ul2.writebacks                 6726 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.0743 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.0685 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0094 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses              32020453 # total number of accesses
itlb.hits                  32019625 # total number of hits
itlb.misses                     828 # total number of misses
itlb.replacements               764 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses               8980498 # total number of accesses
dtlb.hits                   8980171 # total number of hits
dtlb.misses                     327 # total number of misses
dtlb.replacements               207 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
rename_power           7580727.3870 # total power usage of rename unit
bpred_power            82036888.7555 # total power usage of bpred unit
window_power           39980201.9888 # total power usage of instruction window
lsq_power              17469396.7336 # total power usage of load/store queue
regfile_power          64794673.2056 # total power usage of arch. regfile
icache_power           44924809.9324 # total power usage of icache
dcache_power           110363216.7575 # total power usage of dcache
dcache2_power          76341243.7568 # total power usage of dcache2
alu_power              343540056.9578 # total power usage of alu
falu_power             259018297.0388 # total power usage of falu
resultbus_power        41671015.5317 # total power usage of resultbus
clock_power            473335315.2994 # total power usage of clock
avg_rename_power             0.4180 # avg power usage of rename unit
avg_bpred_power              4.5231 # avg power usage of bpred unit
avg_window_power             2.2043 # avg power usage of instruction window
avg_lsq_power                0.9632 # avg power usage of lsq
avg_regfile_power            3.5725 # avg power usage of arch. regfile
avg_icache_power             2.4769 # avg power usage of icache
avg_dcache_power             6.0849 # avg power usage of dcache
avg_dcache2_power            4.2091 # avg power usage of dcache2
avg_alu_power               18.9412 # avg power usage of alu
avg_falu_power              14.2810 # avg power usage of falu
avg_resultbus_power          2.2975 # avg power usage of resultbus
avg_clock_power             26.0975 # avg power usage of clock
fetch_stage_power      126961698.6878 # total power usage of fetch stage
dispatch_stage_power   7580727.3870 # total power usage of dispatch stage
issue_stage_power      629365131.7261 # total power usage of issue stage
avg_fetch_power              7.0001 # average power of fetch unit per cycle
avg_dispatch_power           0.4180 # average power of dispatch unit per cycle
avg_issue_power             34.7002 # average power of issue unit per cycle
total_power            1302037546.3059 # total power per cycle
avg_total_power_cycle       71.7882 # average total power per cycle
avg_total_power_cycle_nofp_nod2      53.2981 # average total power per cycle
avg_total_power_insn        43.9660 # average total power per insn
avg_total_power_insn_nofp_nod2      32.6419 # average total power per insn
rename_power_cc1       4387491.9673 # total power usage of rename unit_cc1
bpred_power_cc1        13787895.9469 # total power usage of bpred unit_cc1
window_power_cc1       29314013.9325 # total power usage of instruction window_cc1
lsq_power_cc1          3635633.8192 # total power usage of lsq_cc1
regfile_power_cc1      37991686.8073 # total power usage of arch. regfile_cc1
icache_power_cc1       28235865.1148 # total power usage of icache_cc1
dcache_power_cc1       38930609.6706 # total power usage of dcache_cc1
dcache2_power_cc1      2753670.2125 # total power usage of dcache2_cc1
alu_power_cc1          53226214.4159 # total power usage of alu_cc1
resultbus_power_cc1    23816546.4052 # total power usage of resultbus_cc1
clock_power_cc1        150816593.7016 # total power usage of clock_cc1
avg_rename_power_cc1         0.2419 # avg power usage of rename unit_cc1
avg_bpred_power_cc1          0.7602 # avg power usage of bpred unit_cc1
avg_window_power_cc1         1.6162 # avg power usage of instruction window_cc1
avg_lsq_power_cc1            0.2005 # avg power usage of lsq_cc1
avg_regfile_power_cc1        2.0947 # avg power usage of arch. regfile_cc1
avg_icache_power_cc1         1.5568 # avg power usage of icache_cc1
avg_dcache_power_cc1         2.1464 # avg power usage of dcache_cc1
avg_dcache2_power_cc1        0.1518 # avg power usage of dcache2_cc1
avg_alu_power_cc1            2.9346 # avg power usage of alu_cc1
avg_resultbus_power_cc1       1.3131 # avg power usage of resultbus_cc1
avg_clock_power_cc1          8.3153 # avg power usage of clock_cc1
fetch_stage_power_cc1  42023761.0617 # total power usage of fetch stage_cc1
dispatch_stage_power_cc1 4387491.9673 # total power usage of dispatch stage_cc1
issue_stage_power_cc1  151676688.4561 # total power usage of issue stage_cc1
avg_fetch_power_cc1          2.3170 # average power of fetch unit per cycle_cc1
avg_dispatch_power_cc1       0.2419 # average power of dispatch unit per cycle_cc1
avg_issue_power_cc1          8.3627 # average power of issue unit per cycle_cc1
total_power_cycle_cc1  386896221.9940 # total power per cycle_cc1
avg_total_power_cycle_cc1      21.3316 # average total power per cycle_cc1
avg_total_power_insn_cc1      13.0644 # average total power per insn_cc1
rename_power_cc2       3094473.7287 # total power usage of rename unit_cc2
bpred_power_cc2        7680069.6027 # total power usage of bpred unit_cc2
window_power_cc2       22396421.6868 # total power usage of instruction window_cc2
lsq_power_cc2          2398597.7397 # total power usage of lsq_cc2
regfile_power_cc2      9828322.2818 # total power usage of arch. regfile_cc2
icache_power_cc2       28235865.1148 # total power usage of icache_cc2
dcache_power_cc2       26921335.2079 # total power usage of dcache_cc2
dcache2_power_cc2      1503286.8561 # total power usage of dcache2_cc2
alu_power_cc2          31563808.9745 # total power usage of alu_cc2
resultbus_power_cc2    15209929.6788 # total power usage of resultbus_cc2
clock_power_cc2        95658974.2739 # total power usage of clock_cc2
avg_rename_power_cc2         0.1706 # avg power usage of rename unit_cc2
avg_bpred_power_cc2          0.4234 # avg power usage of bpred unit_cc2
avg_window_power_cc2         1.2348 # avg power usage of instruction window_cc2
avg_lsq_power_cc2            0.1322 # avg power usage of instruction lsq_cc2
avg_regfile_power_cc2        0.5419 # avg power usage of arch. regfile_cc2
avg_icache_power_cc2         1.5568 # avg power usage of icache_cc2
avg_dcache_power_cc2         1.4843 # avg power usage of dcache_cc2
avg_dcache2_power_cc2        0.0829 # avg power usage of dcache2_cc2
avg_alu_power_cc2            1.7403 # avg power usage of alu_cc2
avg_resultbus_power_cc2       0.8386 # avg power usage of resultbus_cc2
avg_clock_power_cc2          5.2742 # avg power usage of clock_cc2
fetch_stage_power_cc2  35915934.7174 # total power usage of fetch stage_cc2
dispatch_stage_power_cc2 3094473.7287 # total power usage of dispatch stage_cc2
issue_stage_power_cc2  99993380.1438 # total power usage of issue stage_cc2
avg_fetch_power_cc2          1.9802 # average power of fetch unit per cycle_cc2
avg_dispatch_power_cc2       0.1706 # average power of dispatch unit per cycle_cc2
avg_issue_power_cc2          5.5132 # average power of issue unit per cycle_cc2
total_power_cycle_cc2  244491085.1455 # total power per cycle_cc2
avg_total_power_cycle_cc2      13.4801 # average total power per cycle_cc2
avg_total_power_insn_cc2       8.2558 # average total power per insn_cc2
rename_power_cc3       3413797.2711 # total power usage of rename unit_cc3
bpred_power_cc3        14512092.3552 # total power usage of bpred unit_cc3
window_power_cc3       23300228.2401 # total power usage of instruction window_cc3
lsq_power_cc3          3779012.2580 # total power usage of lsq_cc3
regfile_power_cc3      11951740.3984 # total power usage of arch. regfile_cc3
icache_power_cc3       29904759.5925 # total power usage of icache_cc3
dcache_power_cc3       34116083.3554 # total power usage of dcache_cc3
dcache2_power_cc3      8862940.7501 # total power usage of dcache2_cc3
alu_power_cc3          60595193.2371 # total power usage of alu_cc3
resultbus_power_cc3    16626931.6753 # total power usage of resultbus_cc3
clock_power_cc3        127238555.0664 # total power usage of clock_cc3
avg_rename_power_cc3         0.1882 # avg power usage of rename unit_cc3
avg_bpred_power_cc3          0.8001 # avg power usage of bpred unit_cc3
avg_window_power_cc3         1.2847 # avg power usage of instruction window_cc3
avg_lsq_power_cc3            0.2084 # avg power usage of instruction lsq_cc3
avg_regfile_power_cc3        0.6590 # avg power usage of arch. regfile_cc3
avg_icache_power_cc3         1.6488 # avg power usage of icache_cc3
avg_dcache_power_cc3         1.8810 # avg power usage of dcache_cc3
avg_dcache2_power_cc3        0.4887 # avg power usage of dcache2_cc3
avg_alu_power_cc3            3.3409 # avg power usage of alu_cc3
avg_resultbus_power_cc3       0.9167 # avg power usage of resultbus_cc3
avg_clock_power_cc3          7.0153 # avg power usage of clock_cc3
fetch_stage_power_cc3  44416851.9477 # total power usage of fetch stage_cc3
dispatch_stage_power_cc3 3413797.2711 # total power usage of dispatch stage_cc3
issue_stage_power_cc3  147280389.5161 # total power usage of issue stage_cc3
avg_fetch_power_cc3          2.4489 # average power of fetch unit per cycle_cc3
avg_dispatch_power_cc3       0.1882 # average power of dispatch unit per cycle_cc3
avg_issue_power_cc3          8.1203 # average power of issue unit per cycle_cc3
total_power_cycle_cc3  334301334.1996 # total power per cycle_cc3
avg_total_power_cycle_cc3      18.4318 # average total power per cycle_cc3
avg_total_power_insn_cc3      11.2884 # average total power per insn_cc3
total_rename_access        29614634 # total number accesses of rename unit
total_bpred_access          3395912 # total number accesses of bpred unit
total_window_access       106188471 # total number accesses of instruction window
total_lsq_access            9186184 # total number accesses of load/store queue
total_regfile_access       38022273 # total number accesses of arch. regfile
total_icache_access        32048438 # total number accesses of icache
total_dcache_access         8848562 # total number accesses of dcache
total_dcache2_access         714304 # total number accesses of dcache2
total_alu_access           27076518 # total number accesses of alu
total_resultbus_access     30652680 # total number accesses of resultbus
avg_rename_access            1.6328 # avg number accesses of rename unit
avg_bpred_access             0.1872 # avg number accesses of bpred unit
avg_window_access            5.8547 # avg number accesses of instruction window
avg_lsq_access               0.5065 # avg number accesses of lsq
avg_regfile_access           2.0964 # avg number accesses of arch. regfile
avg_icache_access            1.7670 # avg number accesses of icache
avg_dcache_access            0.4879 # avg number accesses of dcache
avg_dcache2_access           0.0394 # avg number accesses of dcache2
avg_alu_access               1.4929 # avg number accesses of alu
avg_resultbus_access         1.6900 # avg number accesses of resultbus
max_rename_access                 4 # max number accesses of rename unit
max_bpred_access                  4 # max number accesses of bpred unit
max_window_access                17 # max number accesses of instruction window
max_lsq_access                    5 # max number accesses of load/store queue
max_regfile_access               12 # max number accesses of arch. regfile
max_icache_access                 4 # max number accesses of icache
max_dcache_access                 4 # max number accesses of dcache
max_dcache2_access                6 # max number accesses of dcache2
max_alu_access                    4 # max number accesses of alu
max_resultbus_access              7 # max number accesses of resultbus
max_cycle_power_cc1         50.7869 # maximum cycle power usage of cc1
max_cycle_power_cc2         33.3045 # maximum cycle power usage of cc2
max_cycle_power_cc3         36.5018 # maximum cycle power usage of cc3
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 376832 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size                 612032 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x0120007bb0 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                  118 # total number of pages allocated
mem.page_mem                   944k # total size of memory pages allocated
mem.ptab_misses              264812 # total first level page table misses
mem.ptab_accesses         154590654 # total page table accesses
mem.ptab_miss_rate           0.0017 # first level page table miss rate

